checkExpr returns [QAst expr]:
    qexpr = abstractQueryExpr EOF
    |
        mexpr=moduleExpr {$expr = new ModuleListExpr(); ((ModuleListExpr)$expr).addModule(mexpr);} 
        (mexpr=moduleExpr {((ModuleListExpr)$expr).addModule(mexpr);})* EOF
;

abstractQueryExpr returns [AbstractQuery expr]:
    qexpr=queryExpr {$expr=qexpr;}
         (
            ('+' right_expr=queryExpr 
                {
                    $expr = new QueryBinaryExpr($expr, right_expr, Connective.UNION);
                }
            )
        |
            ('-' right_expr=queryExpr 
                {
                    $expr = new QueryBinaryExpr($expr, right_expr, Connective.DIFFER);
                }
            )
        |
            ( '&' right_expr = queryExpr
                {
                    $expr = new QueryBinaryExpr($expr, right_expr, Connective.INTER);
                }
            )
         )*
;

queryExpr returns [QueryExpr qexpr] @init{
    qexpr = new QueryExpr();
}: 
    'select' f=featureExpr {$qexpr.addFeature(f);} (COMMA f=featureExpr {$qexpr.addFeature(f);})* 
        (with=withExpr {$qexpr.addWithExpr(with);})? 
        (without=butExpr {$qexpr.addWithoutExpr(without);})? ('inject' o=injExpr {$qexpr.setOCLExpression(o);})?
        ('as' name=IDENT {$qexpr.setAlias($name.getText());}) ?
    /* disable using alias name in a query module. */    
   //| alias = IDENT {$qexpr.setAlias($alias.getText())}
;
 
//queryExpr_nl:
 //   queryExpr '&&' queryExpr
  //  | queryExpr '||' queryExpr
//;
featureExpr returns [QFeatureExpr feature]: 
    (modifier=modifiers) ? dest=(IDENT|STAR) (k=rankExpr)?
    {
        $feature = (k>0) ?
                    new QClassExpr($dest.getText(),modifier,k)
                    :
                    new QClassExpr($dest.getText(),modifier)
                    ;
    }
    | (modifier=modifiers) ? f1 = attrExpr {
            if (modifier!=null) f1.setModifier(modifier);
            $feature=f1;
        }
    | f2 = assocExpr {$feature=f2;}
;

/*
 * experimental implementations.
 */
modifiers returns [Modifier m]:
    'only' {$m=Modifier.ONLY;}
    |
    'no' {$m=Modifier.NO;}
    |'all' {$m=Modifier.NO;}
    |'upward' {$m=Modifier.UPWARD;}
    |'downward'{$m=Modifier.DOWNWARD;}
;

attrExpr returns [QAttrExpr attr]:
    src=(IDENT|STAR) DOT dest=(IDENT|STAR) (k=rankExpr)? 
    {
        attr = (k>0) ? 
               new QAttrExpr($src.getText(),$dest.getText(),k)
               :
               new QAttrExpr($src.getText(),$dest.getText())
               ;
    }
;

assocExpr returns [QAssocExpr assoc]
: src=(IDENT|STAR) COLON name=(IDENT|STAR) COLON dest=(IDENT|STAR) (k=rankExpr)?
    {
        assoc = (k>0) ? 
                new QAssocExpr($src.getText(),$name.getText(),$dest.getText(),k) 
                :
                new QAssocExpr($src.getText(),$name.getText(),$dest.getText())
                ;
    }
;

withExpr returns [QWithExpr with] @init{
    $with = new QWithExpr();
}: 
    'with' w=invExpr{$with.addInvExpr(w);} (COMMA w=invExpr{$with.addInvExpr(w);})*
;

butExpr returns [QButExpr without] @init{
    $without = new QButExpr();
}
:
    'but' (f=featureExpr {$without.addFeatureExpr(f);}  | w=invExpr {$without.addFeatureExpr(w);}) 
    (COMMA (f=featureExpr {$without.addFeatureExpr(f);} | w=invExpr{$without.addFeatureExpr(w);}) )*
;

invExpr returns [QInvExpr inv]: 
    src=(IDENT|STAR) COLON_COLON dest=(IDENT|STAR) (k=rankExpr)? 
    {
        
        inv =   (k>0) ? 
                new QInvExpr($src.getText(),$dest.getText(),k)
                :
                new QInvExpr($src.getText(),$dest.getText())
                ;
    }
;

rankExpr returns [int rank] @init{
    $rank=0;
 }:
    AT k=INT {$rank=Integer.parseInt($k.text);}
;

moduleExpr returns [ModuleExpr mexpr]:
    'module' name=IDENT {$mexpr = new ModuleExpr($name.getText());}
         (varname=IDENT EQUAL)? query=abstractQueryExpr {
             if ($varname!=null) query.setVariable($varname.getText());
             $mexpr.addQuery(query);query.setModule($mexpr);
         }
        ((varname=IDENT EQUAL)? query=abstractQueryExpr {
            if ($varname!=null) query.setVariable($varname.getText());
            $mexpr.addQuery(query);query.setModule($mexpr);
        }
        )*
    'end'
;

injExpr returns [QOCLExpr ocl_expr] @init{
    $ocl_expr = new QOCLExpr();
}: 
    LBRACE expr=expression (k=rankExpr)? 
    {
        if (k>0)
            $ocl_expr.addOCLExpression(expr.n,k);
        else
            $ocl_expr.addOCLExpression(expr.n);
    } 
    (COMMA expr=expression (k=rankExpr)? 
        {
            if (k>0)
                $ocl_expr.addOCLExpression(expr.n,k);
            else
                $ocl_expr.addOCLExpression(expr.n);
        }
    )* RBRACE
;