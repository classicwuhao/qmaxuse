model UNIVERSITY

enum Gender{Male,Female}

--class Module
--attributes
--	code:			Integer
--	year:			Integer
--end

abstract class Person
attributes
	age:	Integer
	gender: Gender
end


class Student < Person
attributes
	id:		Integer
	year:	Integer
end

class Child < Person
end

--class Department
--attributes
--	business_code:	Integer
--	fund: Integer
--end

--class University
--end

--association choose between
--	Student [1..1] role students
--	Module [0..*] role modules
--end

--association teach between
--	Student [1..*] role student
--	Department [1..1] role department
--end

--association manage between
--	University [1..1] role university
--	Department [1..*] role department
--end

constraints

context Person
--	inv inv1: Person.allInstances()->forAll(p|p.age>0 and p.age<18)
	inv test: Person.allInstances()->size()>=1

--context Student
--	inv inv2: self.age > 18
--	inv inv3: self.year>=1 and self.year<=6
--	inv inv4: Student.allInstances()->forAll(s1,s2:Student|s1<>s2 implies s1.id <> s2.id)
--	inv inv5: Student.allInstances()->forAll(s1|s1.modules->forAll(m1|s1.year=m1.year))
--	inv inv6: Student.allInstances()->exists(s|s.year=6) and Student.allInstances()->exists(s|s.year<6)
--	inv inv7: Student.allInstances()->forAll(s|s.modules->notEmpty())
--	inv test1: Student.allInstances()->size()>=1
--	inv test2: Student.allInstances()->size()=0

--context Module
--	inv inv8: self.year>=1 and self.year<=5
--	inv inv9: Module.allInstances()->forAll(m|m.students->isEmpty())

module Queryset
	select Person.age, Student.age with Person::inv1, Student::inv2 as query_part_1
	select Student.*, Module.*, Student:*:* with Student::*, Module::* as query_part_2
	select Student.id, University:*:* with Student::inv4 as query_part_3
end
